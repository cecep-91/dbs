
    - name: Set hostname of each nodes # hostname created with mongo + id + server's hostname, will be stored in /etc/hosts
      tags: last
      set_fact:
        hosts: "mongo{{ id }}.{{ ansible_hostname }}"

    - name: Add entries to /etc/hosts # add all hostname to /etc/hosts
      tags: hostname
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ hostvars[item]['hosts'] }}"
        state: present
        create: yes
      with_items: "{{ ansible_play_hosts_all }}"

    - name: Download libssl1.1 package # Install dependency for galera 4.4
      get_url:
        url: http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
        dest: /tmp/libssl1.1_1.1.1f-1ubuntu2_amd64.deb

    - name: Install libssl1.1 package
      become: yes
      apt:
        deb: /tmp/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
        state: present

    - name: Add MongoDB repository key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-4.4.asc
        state: present
        keyring: /usr/share/keyrings/mongodb-server-4.4.gpg

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-4.4.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse"
        state: present

    - name: Install MongoDB
      apt:
        name: "{{ item }}"
        state: present
        allow_unauthenticated: yes
        update_cache: yes
      loop:
        - mongodb-org
        - python3-pymongo # Needed for ansible task with mongodb_* module

    - name: Configure MongoDB # Copy .conf template to server
      template:
        src: mongodb_cluster.conf.j2
        dest: /etc/mongod.conf

    - name: Create directory for data # Create data dir for mongodb
      file:
        path: "{{ mongodb_data_dir }}"
        state: directory
        owner: mongodb
        group: mongodb
        mode: 0755

    - name: Restart MongoDB
      service:
        name: mongod
        state: restarted

    - name: Allow incoming connections on MongoDB port
      ufw:
        rule: allow
        port: '27017'
        proto: tcp
        state: reloaded

    - name: Wait for mongodb service to boot up
      wait_for:
        timeout: 20

    - name: create a hosts list # list all hostname that was created
      set_fact:
        hosts_list: "{{ ansible_play_hosts | map('extract', hostvars, ['hosts']) | list }}"

    - name: Run replicaset on primary node # start replicaset on primary server with hostname list as a member of replicaset
      community.mongodb.mongodb_replicaset:
        login_host: "{{ hosts }}"
        replica_set: "{{ replSetName }}"
        members: "{{ hosts_list }}"
      when: isMaster

    - name: Wait for mongodb replica to set up
      wait_for:
        timeout: 10

    - name: Add a user to database in a replica set # Create user with root role to access replicaset
      community.mongodb.mongodb_user:
        database: admin
        name: "{{ mongodb_username }}"
        replica_set: "{{ replSetName }}"
        password: "{{ mongodb_password }}"
        roles: ["root"]
        state: present
      when: isMaster

    - shell: "systemctl status mongod" # Debuging mongodb systemctl status
      ignore_errors: yes
      register: service_status

    - debug: var=service_status.stdout_lines